#+title: Using the code
#+PROPERTY: header-args:python :session py :kernel gp-model
#+PROPERTY: header-args:python+ :async yes

* Loading 1D data

#+begin_src python
import numpy as np
import matplotlib.pyplot as plt
from gp_model import GaussField, PlaceField1D, PlaceFieldModel1D, PlaceFieldComparison
np.set_printoptions(precision=2, suppress=True)
#+end_src

#+RESULTS:

We will simulate a dummy data by sampling and thresholding a Gaussian Process to show how to the use of the code. Replace example_psth with your neural recording.

#+begin_src python
num_cells = 500 # Number of neurons to simulate
length = 200 # Size of the environment after binning
res = 0.2
sigma = 2.5 # Correlation length of the neural activity
example_psth = np.maximum(GaussField(num_cells, int(length/res), sigma=sigma/res) - 1, 0)
print("Shape (N, P) = ", example_psth.shape)
#+end_src

#+RESULTS:
: Shape (N, P) =  (500, 1000)

Set the environment size and load data to =PlaceField1D=. Normalized threshold of the data will be automatically inferred and you can supply predicted correlation length to =PlaceFieldModel1D=.

#+begin_src python
L = 200 # Length of the 1D environment in meters
data_1D = PlaceField1D(example_psth, L, filtering=0) #Filtering treshold rectifies the recording to remove small baseline-noise. We use 'filtering=0.5'.
data_1D.analyze_euler_characteristic() # Empirical euler characterstic of the data -- for the model we known the Euler characterstic analytically

sigma_model = 2.5 # predicted correlation length for data
model_1D= PlaceFieldModel1D(data_1D, sigma_model, multiple=3)
#+end_src

#+RESULTS:

The model is then generated and we can use the =PlaceFieldCommparison= class to easily compare the data and model. Refer to the documentation in the code for more comparison features

#+begin_src python
comparison = PlaceFieldComparison(data_1D, model_1D)
comparison.analyze()
field_length_data, field_length_model = comparison('widths') #returns arrays of widths of all place fields across all cells in model and data
print("Data mean field size = {:.2f}, Model mean field size = {:.2f}".format(*comparison('widths').mean())) #compare mean lenth directly
#+end_src

#+RESULTS:
: Data mean field size = 5.55, Model mean field size = 5.59
